from telegram import (
    Update,
    InputMediaPhoto,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import ContextTypes

from analytics import applications_by_priority
from analytics import average_exam_score
from analytics import neediness_in_dormitory
from analytics import unique_students
from utils.scheduler import get_last_update

FACULTY_CODES = {
    '01.03.02': '–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
    '13.03.02.03': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–µ–Ω—Å–æ—Ä–∏–∫–∏', 
    '13.03.03': '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ',
    '15.03.03': '–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞',
    '23.03.02': '–ù–∞–∑–µ–º–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–ª–µ–∫—Å—ã',
    '23.03.03.01': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã',
    '23.03.03.02': '–ò–Ω–∂–∏—Ä–∏–Ω–≥ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
    '23.05.01.01': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞',
    '23.05.01.02': '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏',
    '23.05.01.03': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å',
    '23.05.01.04': '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∏–Ω–∂–∏—Ä–∏–Ω–≥ –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏',
    '54.03.01.01': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω',
}

MAIN_MENU = {
    'applications_by_priority': 'üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º',
    'neediness_in_dormitory': 'üè† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏',
    'average_exam_score': 'üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ï–ì–≠',
    'unique_students': 'üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã',
    'mgtu': '‚òéÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ú–ì–¢–£',
    'madi': '‚òéÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ú–ê–î–ò',
}

ANALYSIS_MAP = {
    MAIN_MENU['applications_by_priority']: applications_by_priority.run_analysis,
    MAIN_MENU['average_exam_score']: average_exam_score.run_analysis,
    MAIN_MENU['neediness_in_dormitory']: neediness_in_dormitory.run_analysis,
    MAIN_MENU['unique_students']: unique_students.run_analysis,
    MAIN_MENU['mgtu']: mgtu_parser.run_analysis,
    MAIN_MENU['madi']: madi_parser.run_analysis,
}


def get_specialization_keyboard(selected: list = None) -> InlineKeyboardMarkup:
    """Generate inline keyboard with specialization selection."""
    
    selected = selected or []
    keyboard = []
    
    for code, name in FACULTY_CODES.items():
        emoji = "‚úÖ" if code in selected else ""
        keyboard.append([InlineKeyboardButton(f"{emoji} {code} {name}", callback_data=f"specialization_{code}")])

    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="specialization_done")])

    return InlineKeyboardMarkup(keyboard)


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [[KeyboardButton(text)] for text in MAIN_MENU.values()]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def specialization_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data
    selected = context.user_data.get("selected_specializations", [])

    if data.startswith("specialization_"):
        code = data.replace("specialization_", "")

        if code == "done":
            count = len(selected)
            if len(selected):
                await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {count}")
            else:
                await query.edit_message_text(text="–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
            return

        if code in selected:
            selected.remove(code)
        else:
            selected.append(code)

        context.user_data["selected_specializations"] = selected
        await query.edit_message_reply_markup(reply_markup=get_specialization_keyboard(selected))


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "/menu ‚Äî –≤—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        "/specialization ‚Äî –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n"
        "/update ‚Äî –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
    )


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞.",
        reply_markup=get_main_menu_keyboard()
    )


async def specialization_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start specialization selection process."""
    
    context.user_data["selected_specializations"] = context.user_data.get("selected_specializations", [])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π—ã:", reply_markup=get_specialization_keyboard(context.user_data["selected_specializations"]))


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text
    selected_specializations = context.user_data.get("selected_specializations")

    if user_input == MAIN_MENU['mgtu']:
        await update.message.reply_text('üê¢ –ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ')
        await update.message.reply_text(mgtu_parser.run_analysis())
        return

    if user_input == MAIN_MENU['madi']:
        await update.message.reply_text(madi_parser.run_analysis())
        return

    if not selected_specializations:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ /specialization")
        return

    if user_input not in ANALYSIS_MAP:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    analysis_func = ANALYSIS_MAP[user_input]
    
    for specialization in selected_specializations:
        file_path = f"data/csv/mpu/{specialization}.csv"
        text, image = analysis_func(file_path, specialization)

        await update.message.reply_text(f"\nüìä –ù–∞–ø—Ä–∞–ª–µ–Ω–∏–µ: {specialization}\n\n{text}")
        if image:
            await update.message.reply_photo(photo=image)


async def update_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    update_time = get_last_update()
    await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \n{update_time}")