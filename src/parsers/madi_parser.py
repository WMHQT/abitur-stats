import requests
import csv
from io import StringIO


def get_direction_info(direction_number):
    url = f"https://pk.madi.ru/results/api.php?action=search&q={direction_number}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if not data.get("success") or not data.get("data", {}).get("groups"):
            return []

        results = []
        for group in data["data"]["groups"]:
            code = group.get("code", "")

            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–¥–∞
            parts = code.split("_")
            if len(parts) >= 4:
                full_direction = parts[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä "15.03.01"
                form_code = parts[2]  # –ó –∏–ª–∏ –û
                basis_code = parts[3]  # –ü–û –∏–ª–∏ –ë

                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è
                education_form = "–ó–∞–æ—á–Ω–∞—è" if form_code == "–ó" else "–û—á–Ω–∞—è" if form_code == "–û" else form_code

                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
                education_basis = "–ü–ª–∞—Ç–Ω–æ–µ" if basis_code == "–ü–û" else "–ë—é–¥–∂–µ—Ç–Ω–æ–µ" if basis_code == "–ë" else basis_code

                results.append({
                    "full_direction": full_direction,
                    "education_form": education_form,
                    "education_basis": education_basis,
                    "code": code,
                    "direction_name": group.get("direction", ""),
                    "total_places": group.get("total_places", 0),
                    "applications_count": group.get("applications_count", 0)
                })

        return results

    except:
        return []


def print_direction_info(direction_number):
    results = get_direction_info(direction_number)

    if not results:
        print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    print(f"\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {direction_number}")
    print("=" * 60)

    for i, info in enumerate(results, 1):
        print(f"\n{i}. {info['direction_name']}")
        print(f"   –ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {info['full_direction']}")
        print(f"   –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {info['education_form']}")
        print(f"   –û—Å–Ω–æ–≤–∞–Ω–∏–µ: {info['education_basis']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {info['total_places']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {info['applications_count']}")
        print(f"   –ü–æ–ª–Ω—ã–π –∫–æ–¥: {info['code']}")


def export_to_csv(direction_number, filename=None):
    results = get_direction_info(direction_number)

    if not results:
        print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    if filename is None:
        filename = f"direction_{direction_number.replace('.', '')}.csv"

    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['direction_name', 'full_direction', 'education_form', 'education_basis',
                      'total_places', 'applications_count', 'code']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        writer.writerows(results)

    print(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


def get_csv_string(direction_number):
    results = get_direction_info(direction_number)

    if not results:
        return ""

    output = StringIO()
    fieldnames = ['direction_name', 'full_direction', 'education_form', 'education_basis',
                  'total_places', 'applications_count', 'code']
    writer = csv.DictWriter(output, fieldnames=fieldnames)

    writer.writeheader()
    writer.writerows(results)

    return output.getvalue()


def check_student_enrollment(student_id):
    url = f"https://pk.madi.ru/results/api.php?action=search&q={student_id}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if data.get("success") and data.get("data", {}).get("groups"):
            return True
        return False

    except:
        return False


# # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
# student_id = "112312312"
# result = check_student_enrollment(student_id)
# print(result)
# 
# 
# print_direction_info("15.")
# export_to_csv("15.")
# print("\nCSV —Ñ–æ—Ä–º–∞—Ç:")
# print(get_csv_string("15."))
